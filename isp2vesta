#!/bin/bash

[ "$(whoami)" != 'root' ] && ( echo "У вас нет прав для запуска!"; exit 1 )
v='0.01 alpha VPS-server.ru edition :o)'
usage() {
    cat <<EOM

isp2vesta version $v
This script can copy your users, domains, DB and email boxes from the ISPManager 4 to VestaCP....
But sometimes can not copy :o)
    
Usage:
bash $(basename $0) IP-ADDRESS ROOT-PASWORD [ISP-USERNAME]
For example: $(basename $0) 188.138.93.111 2dcxDHrjZf7qRY myname

EOM
    exit 0
}
[ -z $1 ] || [ -z $2 ] && { usage; } 
IP_SOURCE=$1
PASSWD_SOURCE=$2
USER_EXPORT=$3
MAIL_BOXES="/root/MailBoxes.txt"
REPORT="/root/report.rep"
HOSTSADD='/root/hostadd.txt'
if ! [ -f /etc/profile.d/vesta.sh ]; then
  echo 'VestaCP is not installed?'
  exit 0
else
  source /etc/profile.d/vesta.sh
  source $VESTA/func/rebuild.sh
fi

MOVE_DIR="/root/move"
SSL_DIR="/etc/ssl.local"
ISP_DIR="$MOVE_DIR/ispmgr"
CFG_DIR="$MOVE_DIR/conf"
TMP="/tmp/tempo.tmp"
ALL_GRANTS="/root/grants.sql"
RSYNC=`which rsync`
CHOWN=`which chown`
SSHPASS=`which sshpass`
SED=`which sed`
PERL=`which perl`
CAT=`which cat`
AWK=`which awk`
ISP_CFG="$MOVE_DIR/ispmgr/etc/ispmgr.conf"
EXCLUDE_DIRS="root httpd-cert httpd-logs index.html nginx-logs php-bin tmp"
IP=$($VESTA/bin/v-list-sys-ips | tail -1 | awk '{print $1}')

RO='-ratlz --info=progress2 --quiet'
rel=$(cat /etc/*-release |grep 'Debian')
if [ -n "$rel" ]; then
	release='debian'
else
	rel=$(cat /etc/*-release |grep 'CentOS')
	if [ -n "$rel" ]; then
		release='centos'
		RO='-ratlz --quiet'
	else	
	rel=$(cat /etc/*-release |grep 'Ubuntu')
	if [ -n "$rel" ]; then
		release='ubuntu'
	  else
		clear; echo_bold "Not supported OS version! Please contact with support@vps-server.ru"; exit 3
	  fi
	fi
fi

if [ "$SSHPASS"  == '' ] || [ "$RSYNC" == '' ]; then
  if [ "$release" == 'debian' ] || [ "$release" == 'ubuntu' ]; then
      	apt-get install sshpass rsync -y
  else
	if [ "$release" == 'centos' ]; then
		yum install epel-release -y
		yum install sshpass rsync -y
	fi
  fi
  SSHPASS=`which sshpass`
fi

if ! [ -d $MOVE_DIR ]; then
  mkdir $MOVE_DIR
fi
if ! [ -d $CFG_DIR ]; then
  mkdir $CFG_DIR
fi
if ! [ -d $SSL_DIR ]; then
  mkdir $SSL_DIR
  chmod 0711 $SSL_DIR
fi
#--
POS="\033[65G"
RED="\033[1;31m"
NOCOL="\033[00m"
GREEN="\033[1;32m"
CYAN="\033[1;36m"
GREY="\033[0;37m"
export LC_ALL=en_US.UTF-8
rep() {
	echo $* >> $REPORT	
}
echo_red() {
  echo -e "\033[01;31m$*\033[00m"
  echo $* >> $REPORT
}
echo_green() {
  echo -e "\033[01;32m$*\033[00m"
}
echo_bold() {
  echo -e "\033[0;1m$*\033[00m"
}
z_copy() {
	echo -ne "  $@$POS${BLUE} wait $NOCOL"
}
z_done() {
  echo -e "$POS${GREEN} done $NOCOL"
}
z_fail() {
  echo -e "$POS${RED} fail $NOCOL"
}
restore_templates() {
TARIFS=$(cat $ISP_CFG |perl -n -e '/Preset "(.*)"/is && print "$1\n"' |sed 's/ /_/g')
NS=$(cat $ISP_CFG |perl -n -e '/NameServers([\s]*)([\S\w\d\.\-]*)([\s]*)([\S\w\d\.\-]*)/is && print "$2, $4"' )

for TARIF in $TARIFS
do
  cat $ISP_CFG |grep -A 27 -E 'Preset "'$TARIF'"' >  $TMP
  WEB_TEMPLATE=$(echo $TARIF)
  BANDWIDTH=$(cat $TMP |grep -w 'Bandwidth' |awk '{print $2}' )
  [ "$BANDWIDTH" = '' ] && BANDWIDTH='10488576'
  WEB_DOMAINS=$(cat $TMP |grep -w 'WebDomain' |awk '{print $2}' )
  [ "$WEB_DOMAINS" = '' ] && WEB_DOMAINS='0'
  WEB_ALIASES=$(cat $TMP |grep -w 'Domain' |awk '{print $2}' )
  [ "$WEB_ALIASES" = '' ] && WEB_ALIASES='0'
  MAIL_DOMAINS=$(cat $TMP |grep -w 'MailDomain' |awk '{print $2}' )
  [ "$MAIL_DOMAINS" = '' ] && MAIL_DOMAINS='0'
  MAIL_ACCOUNTS=$(cat $TMP |grep -w 'Mail' |awk '{print $2}' )
  [ "$MAIL_ACCOUNTS" = '' ] && MAIL_ACCOUNTS='0'
  DATABASES=$(cat $TMP |grep -w 'Database' |awk '{print $2}' )
  [ "$DATABASES" = '' ] && DATABASES='0'
  DISK_QUOTA=$(cat $TMP |grep -w 'Disk' |awk '{print $2}' )
  [ "$DISK_QUOTA" = '' ] && DISK_QUOTA='0'
  SHELL=$(cat $TMP |grep -w 'Shell' |awk '{print $2}' )
  if [ "$SHELL" == 'off' ] || [ "$SHELL" == '' ]; then
     SHELL='nologin'
  else
     SHELL='/bin/sh'
  fi
  TIME=$(date '+%T')
  DATE=$(date '+%Y-%m-%d')

echo "
WEB_TEMPLATE='phpcgi'
PROXY_TEMPLATE='default'
DNS_TEMPLATE='default'
WEB_DOMAINS='$WEB_DOMAINS'
WEB_ALIASES='$WEB_ALIASES'
DNS_DOMAINS='10000'
DNS_RECORDS='10000'
MAIL_DOMAINS='$MAIL_DOMAINS'
MAIL_ACCOUNTS='$MAIL_ACCOUNTS'
DATABASES='$DATABASES'
CRON_JOBS='100'
DISK_QUOTA='$DISK_QUOTA'
BANDWIDTH='$BANDWIDTH'
NS='$NS'
SHELL='$SHELL'
BACKUPS='3'
TIME='$TIME'
DATE='$DATE'
" > /tmp/$TARIF.pkg
  $VESTA/bin/v-add-user-package /tmp $TARIF yes # >> $ERROR_LOG
done
}

Email_Export() {
  USER=$1

  _email='/root/Email_Export'

  echo "#!/bin/bash

  ls -R /var/www/$USER/data/email |awk '/:$/&&f{s=\$0;f=0}/:$/&&!f{sub(/:$/,\"\");s=\$0;f=1;next}NF&&f{ print s\"/\"\$0 }' |sed  \"s/\/var\/www\/$USER\/data\/email\///g\" |grep '/' > $_email

  " > $MOVE_DIR/Email_Export.sh

  $RSH_OPTIONS $IP_SOURCE 'bash -s ' < $MOVE_DIR/Email_Export.sh
  $RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$_email /root/move/
  sed -i -e 's/\//:/g' $MOVE_DIR/Email_Export
  if [ -s $MOVE_DIR/Email_Export ]; then
	  echo_bold "CREATE Email Boxes for user $USER:"
      echo "#--------------------------------------------------" >> $MAIL_BOXES
      echo "USER: $USER" >> $MAIL_BOXES
      while IFS=: read DOMAIN ACCOUNT; do
          PASSWORD=$(tr -cd '[:alnum:]' < /dev/urandom |fold -w30 |head -n1 )
          # options: USER DOMAIN ACCOUNT PASSWORD [QUOTA]
          z_copy "Create email box $ACCOUNT@$DOMAIN"
          $VESTA/bin/v-add-mail-account $USER $DOMAIN $ACCOUNT $PASSWORD > /dev/null 2>&1  &&  z_done  || { z_fail;	echo_red "	Error creating $ACCOUNT@$DOMAIN"; continue; }
          echo "Login: $ACCOUNT@$DOMAIN Pass: $PASSWORD" >> $MAIL_BOXES
          z_copy "Copy messages from $ACCOUNT@$DOMAIN"
          $RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:/var/www/$USER/data/email/$DOMAIN/$ACCOUNT/.maildir/ /home/$USER/mail/$DOMAIN/$ACCOUNT  > /dev/null 2>&1 &&  z_done  || { z_fail; echo_red "	Error copy messages box $ACCOUNT@$DOMAIN"; continue;}
          $CHOWN -R $USER:$USER /home/$USER/mail/$DOMAIN/$ACCOUNT
      done < $MOVE_DIR/Email_Export
  fi
}

MySQL_dump() {
USER=$1
USERDB_ID=`cat $CFG_DIR/passwd |$PERL -n -e '/^'$USER':x:([\d]*):([\d]*)/ && print "$2\n"'`
USER_BASES=`cat $ISP_DIR/etc/ispmgr.conf |$PERL -n -e '/^DbAssign "MySQL" ([\S]*) '$USERDB_ID'$/ && print "$1 "'`
  if [ -n "$USER_BASES" ]; then
    rep "#----------------------------------------------------------------------"
    rep "USER->'$USER' USERDB_ID->'$USERDB_ID'  USER_BASES->'$USER_BASES'"
    rep "#----------------------------------------------------------------------"
	# echo_bold 'MySQL databases copy'
	VESTA_DB_PASS=`cat /root/.my.cnf |$PERL -n -e '/password=(.*)/ && print "$1"' |tr -d "'"`
	_dump='/root/dump.sql.gz'
	echo -n "Copy databases ISPManager for user "; echo_bold "$USER"
	for CUR_DB in $USER_BASES; do
		CUR_DB=${CUR_DB//' '/}
		if [ -n "$CUR_DB" ]; then
		echo_bold "Copy database $CUR_DB:"
		MySQL_USER=`cat $ALL_GRANTS |grep $CUR_DB |sed "s/'//g" |$PERL -n -e '/GRANT ALL *.* TO ([\w\d\-\_]*)@localhost/&& print "$1"'`
		MD5=`cat $ALL_GRANTS |sed "s/'//g" |grep $MySQL_USER |$PERL -n -e '/IDENTIFIED BY PASSWORD (\S*)/ && print "$1 "'| awk '{print $1}'`

		TMPDB=`echo $CUR_DB |sed 's/'$USER'\_//g' `
		TMPUSER=`echo $MySQL_USER |sed 's/'$USER'\_//g' `

		rep "#-DB $CUR_DB begin report"
		rep "DB:'$CUR_DB';	MySQL user: '$MySQL_USER'; 	Passwd(MD5): '$MD5'"
		rep "TMPDB: '$TMPDB'; TMPUSER: '$TMPUSER'"
 
		if [ "$TMPDB" != "$CUR_DB" ] && [ "$TMPUSER" != "$USER" ]; then
		  # echo_red "USER=$USER CUR_DB=$CUR_DB TMPDB=$TMPDB TMPUSER=$TMPUSER"
		  # USER DATABASE DBUSER DBPASS [TYPE] [HOST] [CHARSET]
		  #echo "$VESTA/bin/v-add-database '$USER' '$TMPDB' '$TMPUSER' '$MD5' 'mysql' 'localhost'"

		  # echo "$VESTA/bin/v-add-database $USER $TMPDB $TMPUSER $MD5 mysql localhost"
		  $VESTA/bin/v-add-database "$USER" "$TMPDB" "$TMPUSER" "$MD5" 'mysql' 'localhost'
		  rep "DB '$CUR_DB' and user '$MySQL_USER' with PREFIX"
		else
		# No prefix
		  LAST_DB_NUM=`ls -da /var/lib/mysql/"$USER"_db* 2>/dev/null | wc -l`
		  DB_NUM=$(($LAST_DB_NUM + 1))
		  $VESTA/bin/v-add-database "$USER" db"$DB_NUM" u"$DB_NUM" "$MD5" 'mysql' 'localhost'
		  rep "DB '$CUR_DB' and user '$MySQL_USER' NO PREFIX"
		  rep "Added in MySQL 'db$DB_NUM' 'u$DB_NUM'"
		fi

    echo "#!/bin/bash

    mysqldump -u root -p$MySQL_Pass $CUR_DB| gzip >  $_dump

    " > $MOVE_DIR/MySQL_dump.sh

    $RSH_OPTIONS $IP_SOURCE 'bash -s ' < $MOVE_DIR/MySQL_dump.sh
    rep "dump $CUR_DB created successfully in remote servers"
    z_copy "	Copy dump $CUR_DB from ISPmanager MySQL"
    $RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$_dump /root
    rep "dump $CUR_DB copy successfully from remote servers"
    z_done
    z_copy "	Restore database $CUR_DB in MySQL VestaCP"
    echo 'CREATE DATABASE IF NOT EXISTS `'$CUR_DB'` ;' |mysql -u "root" -p"$VESTA_DB_PASS" -N -B
    rep "CREATE DATABASE $CUR_DB successfully in MySQL"
    gunzip < $_dump | mysql -u "root" -p"$VESTA_DB_PASS" --force "$CUR_DB" || { echo_red "Error in Database $CUR_DB ."; echo $?;  exit 3; }
    rep "dump $CUR_DB restore in MySQL successfully"
    z_done
    z_copy "	Restore users and PRIVILEGES in MySQL VestaCP"
    rep "#----------------------------------------------------------------------"
    cat $ALL_GRANTS |grep $CUR_DB |sed 's/Grants for .*/#### &/' |sed 's/$/;/' |mysql -u root -p$VESTA_DB_PASS || { z_fail; echo $?;  exit 3; } && z_done
    cat $ALL_GRANTS |grep $CUR_DB |sed 's/Grants for .*/#### &/' |sed 's/$/;/' >> $REPORT
    rep "PRIVILEGES for $CUR_DB: $?"
    rep "#----------------------------------------------------------------------"
    
    if !([ "$TMPDB" != "$CUR_DB" ] && [ "$TMPUSER" != "$USER" ]); then
      rm -rf "/var/lib/mysql/$USER"_db"$DB_NUM"
      ln -s "/var/lib/mysql/$CUR_DB" "/var/lib/mysql/$USER"_db"$DB_NUM"
      rep "make link for $CUR_DB -> $USER _db$DB_NUM created successfully"
    fi
  fi
  done
  fi
}

restore_users() {
USERS=$(cat $ISP_CFG |perl -n -e '/Account "(.*)"/is && print "$1 "')
if [ -n  "$USER_EXPORT" ]; then
	f=$(echo $USERS |grep -w "$USER_EXPORT")
	if [ -z "$f" ] ; then
		echo_red "ERROR! User $USER_EXPORT not found in server IP:$IP_SOURCE."; echo_bold "You can find the user in the list $USERS"; exit 9
	else
		USERS=$USER_EXPORT
	fi
fi

for USER in $USERS; do
  # echo "$ISP_CFG | grep -A 28 -E 'Account \"'$USER'\"' > $TMP"
  cat $ISP_CFG | grep -A 28 -E 'Account "'$USER'"' > $TMP
  IS_RESELLER=$(cat $TMP |grep -w 'UserLimit' |awk '{print $2}' )
  if [ -z "$IS_RESELLER" ]; then
	  echo "User $USER start copy.."
	  PACKAGE=`cat $TMP |grep -w "Preset" |awk '{print $2}'`
	  [ "$PACKAGE" = 'custom' ] && PACKAGE='default'
	  [ "$PACKAGE" = '' ] && PACKAGE='default'
	  EMAIL=$($PERL -n -e '/^Email\s+(.*)$/ && print "$1\n"' /root/move/ispmgr/var/userconf/ispmgr.$USER)
	  [ "$EMAIL" = '' ] && EMAIL='support@vps-server.ru'; rep $USER
	  PASSWORD=$(date +%s | sha256sum | base64 | head -c 32 ; echo)
	  FNAME='UserName'
	  LNAME='UserLastName'
	  # Usage: v-add-user USER PASSWORD EMAIL [PACKAGE] [FNAME] [LNAME]
	  # echo "$VESTA/bin/v-add-user $USER $PASSWORD $EMAIL $PACKAGE $FNAME $LNAME"

	  nice -19 $VESTA/bin/v-add-user $USER $PASSWORD $EMAIL $PACKAGE $FNAME $LNAME  >> $REPORT
	  
	  # USERID=`cat $CFG_DIR/passwd |$PERL -n -e '/^'$USER':x:([\d]*):([\d]*)/ && print "$1\n"'`
	  # DOMAINS=$(cat $ISP_CFG | $PERL -n -e '/^Domain ([\S]*) '$USERID'$/i && print "$1\n"')
	  DOMAINS=$(cat $APACHE_CFG |grep -w "/var/www/$USER" |grep "Directory" |$PERL -n -e '/([\w\d\.\-\_]*)\>/ && print "$1 "')
	  for DOMAIN in $DOMAINS
		do
		DOMAIN=$(echo $DOMAIN)
  
	    ALIASES=$(cat $APACHE_CFG | grep -w $DOMAIN | $PERL -n -e '/ServerAlias (.*)$/ && print "$1 "'|$SED  s/"www.$DOMAIN"// )
	    ALIASES=$(echo $ALIASES | $SED 's/^[ \t]*//')
		
		WEBDOMAIN=$(echo $(CHARSET='UTF-8' idn -u $DOMAIN)|tr '\n' ' ')
		WEBDOMAIN=$(echo $WEBDOMAIN)
		# Usage: v-add-domain USER DOMAIN [IP] [RESTART]
		nice -19 $VESTA/bin/v-add-domain $USER $WEBDOMAIN $IP
		# echo "	#----------------------------------------------------------------------------------"
		echo "	Copy files domain $WEBDOMAIN"
		[ -n "$ALIASES" ] && (echo "	ALIASES:" $(CHARSET='UTF-8' idn -u $ALIASES);)
		# echo "	#----------------------------------------------------------------------------------"
		if [ -n "$ALIASES" ]; then
		  ALIASES=$(echo $(CHARSET='UTF-8' idn -u $ALIASES)|tr '\n' ' ')
		  # v-add-web-domain-alias USER DOMAIN DOM_ALIAS [RESTART]
		  nice -19 $VESTA/bin/v-add-web-domain-alias $USER $WEBDOMAIN $ALIASES 'no'
		fi
		if [ -n "$NGINX_CFG" ]; then
		  SSL=$(cat $NGINX_CFG |grep -A 40 "server_name $DOMAIN" |grep -w 'ssl_certificate' |$PERL -n -e '/([\S]*);/ && print "$1 "')
		  SSL_KEY=$(cat $NGINX_CFG |grep -A 40 "server_name $DOMAIN" |grep -w 'ssl_certificate_key ' |$PERL -n -e '/([\S]*);/ && print "$1 "')
		  if [ -n "$SSL" ] && [ -n "$SSL_KEY" ]; then
			# Usage: v-add-domain USER DOMAIN SSL_DIR [SSL_HOME] [RESTART]
			# 	nice -19 $VESTA/bin/v-add-web-domain-ssl $USER $WEBDOMAIN "public_shtml"
			echo "	From: $IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/ ->"
			z_copy "	-> To: /home/$USER/web/$WEBDOMAIN/public_shtml"
			rm -f /home/$USER/web/$WEBDOMAIN/public_shtml/index.html
			$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/ /home/$USER/web/$WEBDOMAIN/public_shtml  > /dev/null 2>&1  &&  z_done  || { z_fail;	echo_red "	Error in source path $IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/"; continue; }
			z_copy "	SSL Sertificate copy start"
			$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$SSL $SSL_DIR/
			$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$SSL_KEY $SSL_DIR/
			chmod 0600 $SSL_DIR/*
			crt=`basename "$SSL"`
			key=`basename "$SSL_KEY"`
			mv $SSL_DIR/$crt "$SSL_DIR/$DOMAIN.crt"
			mv $SSL_DIR/$key "$SSL_DIR/$DOMAIN.key"
			nice -19 $VESTA/bin/v-add-web-domain-ssl $USER $WEBDOMAIN $SSL_DIR 'single' 'no'
			$CHOWN -R $USER:$USER /home/$USER/web/$WEBDOMAIN/public_shtml/
			z_done
		  else
			rm -f /home/$USER/web/$WEBDOMAIN/public_html/index.html
			echo "	From: $IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/ ->"
			z_copy "	-> To: /home/$USER/web/$WEBDOMAIN/public_html"
			$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/ /home/$USER/web/$WEBDOMAIN/public_html > /dev/null 2>&1  && z_done || { z_fail; echo_red "	Error in source path $IP_SOURCE:/var/www/$USER/data/www/$DOMAIN/"; continue; }
			$CHOWN -R $USER:$USER /home/$USER/web/$WEBDOMAIN/public_html/
		  fi
		  restore_dns_records $USER $DOMAIN
		  echo "$IP $DOMAIN" >> $HOSTSADD
		fi
		echo_green "	$DOMAIN complete"
		done
		MySQL_dump $USER
		Email_Export $USER
  fi
done
}

restore_dns_records(){
  USER=$1
  DOMAIN=$2
  BIND_FILE=`cat $NAMED_CFG |grep $DOMAIN |grep file |$PERL -n -e '/\"(.*)\";$/ && print "$1\n"'`

  if [ -n "$BIND_FILE" ]; then
  $RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$BIND_FILE "$CFG_DIR/$DOMAIN.dns"
  if [ -e $CFG_DIR/$DOMAIN.dns ];then
    MX_RECS=`cat $CFG_DIR/$DOMAIN.dns |$PERL -n -e '/\sIN\sMX\s(\d{1,2})\s(.*)$/ && print "$1:$2\n"' |grep -v mail`
    A_RECS=`cat $CFG_DIR/$DOMAIN.dns |$PERL -n -e '/(.*)\sIN\sA\s(.*)\s(.*)$/ && print "$1:$2\n"' |grep -v $DOMAIN |grep -v ftp |grep -v www |grep -v mail |grep -v smtp |grep -v pop`
    CNAME_RECS=`cat $CFG_DIR/$DOMAIN.dns |$PERL -n -e '/(.*)\sIN\sCNAME\s(.*)$/ && print "$1:$2\n"'`

    if [ -n "$MX_RECS" ]; then
      CUR_MX_REC_id=`$VESTA/bin/v-list-dns-records $USER $DOMAIN |grep MX |awk  '{print $1}'`
      $VESTA/bin/v-delete-dns-record $USER $DOMAIN $CUR_MX_REC_id
      for MX_REC in $MX_RECS
      do
        VALUE=`echo $MX_REC |sed 's/:/ /g' |awk '{print $2}'`
        PRIORITY=`echo $MX_REC |sed 's/:/ /g' |awk '{print $1}'`
        # Usage: v-add-dns-record USER DOMAIN RECORD TYPE VALUE [PRIORITY] [ID] [RESTART]
        $VESTA/bin/v-add-dns-record $USER $DOMAIN @ MX $VALUE $PRIORITY
        rep "--------------------------------------------------------------------------------"
        rep "$VESTA/bin/v-add-dns-record $USER $DOMAIN @ MX $VALUE $PRIORITY"
        rep "--------------------------------------------------------------------------------"
      done
    fi

    if [ -n "$A_RECS" ]; then
      for A_REC in $A_RECS
      do
        VALUE=`echo $A_REC |sed 's/:/ /g'|awk '{print $2}'`
        RECORD=`echo $A_REC |sed 's/:/ /g' |awk '{print $1}'`
        # Usage: v-add-dns-record USER DOMAIN RECORD TYPE VALUE [PRIORITY] [ID] [RESTART]
        $VESTA/bin/v-add-dns-record $USER $DOMAIN $RECORD A $IP
        rep "--------------------------------------------------------------------------------"
        rep "$VESTA/bin/v-add-dns-record $USER $DOMAIN $RECORD A $IP"
        rep "--------------------------------------------------------------------------------"
      done
    fi

    if [ -n "$CNAME_RECS" ]; then
      for CNAME_REC in $CNAME_RECS
      do
        VALUE=`echo $CNAME_REC |sed 's/:/ /g'|awk '{print $2}'`
        RECORD=`echo $CNAME_REC |sed 's/:/ /g' |awk '{print $1}'`
        # Usage: v-add-dns-record USER DOMAIN RECORD TYPE VALUE [PRIORITY] [ID] [RESTART]
        $VESTA/bin/v-add-dns-record $USER $DOMAIN $RECORD CNAME $IP
        rep "--------------------------------------------------------------------------------"
        rep "$VESTA/bin/v-add-dns-record $USER $DOMAIN $RECORD CNAME $IP"
        rep "--------------------------------------------------------------------------------"
      done
    fi
  fi
  fi
}

#-
echo `date "+%d-%m-%Y %H:%M:%S"` > $REPORT; echo '' > $MAIL_BOXES; echo '' > $HOSTSADD; clear;
RSH_OPTIONS="$SSHPASS -p $PASSWD_SOURCE ssh -o StrictHostKeyChecking=no -l root"
z_copy "Copy ISPManager configs from  server $IP_SOURCE"
$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:/usr/local/ispmgr /root/move/ > /dev/null 2>&1 && z_done || { echo_red "Error connect to $IP_SOURCE data loss OR ISPManager 4 config files not found! Exit."; exit 1; }
z_copy "Copy /etc/passwd from  server $IP_SOURCE"
$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:/etc/passwd  $CFG_DIR  > /dev/null 2>&1  && z_done || { echo_red "Error copy file /etc/passwd from server $IP_SOURCE"; }
ISP_APACHE_CFG=`cat $ISP_DIR/etc/ispmgr.conf |grep "path httpd.conf" |awk '{print $3}'`
if [ $ISP_APACHE_CFG != '' ]; then
	APACHE_CFG=`basename $ISP_APACHE_CFG`
	APACHE_CFG=$CFG_DIR/$APACHE_CFG
	z_copy "Copy APACHE config from server $IP_SOURCE"
	$RSYNC $RO --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$ISP_APACHE_CFG $APACHE_CFG  > /dev/null 2>&1  && z_done || { echo_red "Error copy file $CFG_DIR/$APACHE_CFG from server $IP_SOURCE"; exit 1; }
fi
ISP_NAMED_CFG=`cat $ISP_DIR/etc/ispmgr.conf |grep "path named.conf" |awk '{print $3}'`
if [ $ISP_NAMED_CFG != '' ]; then
	NAMED_CFG=`basename $ISP_NAMED_CFG`
	NAMED_CFG=$CFG_DIR/$NAMED_CFG
	z_copy "Copy NAMED config from server $IP_SOURCE"
	$RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$ISP_NAMED_CFG $NAMED_CFG  > /dev/null 2>&1  && z_done || { echo_red "Error copy file $CFG_DIR/$NAMED_CFG from server $IP_SOURCE"; exit 1; }
fi
ISP_NGINX_CFG=`cat $ISP_DIR/etc/ispmgr.conf |grep "path nginx.conf" |awk '{print $3}'`
if [ $ISP_NGINX_CFG != '' ]; then
	NGINX_CFG=$CFG_DIR/`basename $ISP_NGINX_CFG`
	z_copy "Copy NGINX config from server $IP_SOURCE"
	$RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$ISP_NGINX_CFG $NGINX_CFG  > /dev/null 2>&1  && z_done || { echo_red "Error copy file $CFG_DIR/$NGINX_CFG from server $IP_SOURCE"; exit 1; }
  else
	z_fail
	echo_red "NGINX not installed in source server $IP_SOURCE"
	echo_red "This configs not supported now! Exit." 
	exit 1 	
fi
MySQL_Pass=`cat $ISP_DIR/etc/ispmgr.conf |$PERL -n -e '/[\s]Password ([\S]*)/ && print "$1 "'`
if [ -n "$MySQL_Pass" ]; then
  echo "#!/bin/bash
  mysql -u root -p$MySQL_Pass -B -N -e \"SELECT DISTINCT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') AS query FROM user\" mysql |mysql  -u root -p$MySQL_Pass  > $ALL_GRANTS
" > $MOVE_DIR/get_grants.sh
	z_copy "Copy MySQL GRANTS from $IP_SOURCE"
	$RSH_OPTIONS $IP_SOURCE 'bash -s ' < $MOVE_DIR/get_grants.sh 
	$RSYNC -ratlz --rsh="$RSH_OPTIONS" root@$IP_SOURCE:$ALL_GRANTS $ALL_GRANTS  > /dev/null 2>&1  && z_done || { echo_red "Error copy MySQL GRANTS from $IP_SOURCE"; exit 1; }
	$PERL -pi -e 's/\\_/_/g' $ALL_GRANTS; $PERL -pi -e 's/\\_/_/g' $ALL_GRANTS
	$PERL -pi -e "s/$IP_SOURCE/localhost/g" $ALL_GRANTS
  else
	z_fail
	echo_red "MySQL passwd not found in source server $IP_SOURCE"
	echo_red "Exit." 
	exit 1 
fi
z_copy "Restore templates from ISPManager to VestaCP"; restore_templates; z_done
echo_bold "Start copying users from ISPManager"; restore_users
echo_bold "#-------------------------------------------------------------------#"
echo_green "Copying has been completed!"
echo_bold "Error report file is $REPORT"
echo_bold "All email boxes and passwords you can find in file $MAIL_BOXES"
echo_bold "All domains for add in /etc/hosts for Linux"
echo_bold "Or C:\Windows\System32\drivers\etc you can find in file $HOSTSADD"
echo_bold "#-------------------------------------------------------------------#"
exit 0
#- end
